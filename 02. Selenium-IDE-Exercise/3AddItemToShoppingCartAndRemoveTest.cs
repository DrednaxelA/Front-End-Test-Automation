// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class 3AddItemToShoppingCartAndRemoveTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void 3AddItemToShoppingCartAndRemove() {
    // Test name: 3. Add_Item_To_Shopping_Cart_And_Remove
    // Step # | name | target | value
    // 1 | open | / | 
    // Open Webpage
    driver.Navigate().GoToUrl("https://www.saucedemo.com//");
    // 2 | type | css=*[data-test=username] | standard_user
    // Enter Valid Username
    driver.FindElement(By.CssSelector("*[data-test=username]")).SendKeys("standard_user");
    // 3 | type | css=*[data-test=password] | secret_sauce
    // Enter Valid Password
    driver.FindElement(By.CssSelector("*[data-test=password]")).SendKeys("secret_sauce");
    // 4 | click | css=*[data-test=login-button] | 
    // Click Login Button
    driver.FindElement(By.CssSelector("*[data-test=login-button]")).Click();
    // 5 | click | css=*[data-test=add-to-cart-sauce-labs-backpack] | 
    // Add Item To Cart
    driver.FindElement(By.CssSelector("*[data-test=add-to-cart-sauce-labs-backpack]")).Click();
    // 6 | click | css=*[data-test=shopping-cart-link] | 
    // Click Cart Button
    driver.FindElement(By.CssSelector("*[data-test=shopping-cart-link]")).Click();
    // 7 | assertText | css=*[data-test=inventory-item-name] | Sauce Labs Backpack
    // Assert Item Name is "Sauce Labs Backpack"
    Assert.That(driver.FindElement(By.CssSelector("*[data-test=inventory-item-name]")).Text, Is.EqualTo("Sauce Labs Backpack"));
    // 8 | assertText | css=*[data-test=item-quantity] | 1
    // Assert Item Quantity is 1
    Assert.That(driver.FindElement(By.CssSelector("*[data-test=item-quantity]")).Text, Is.EqualTo("1"));
    // 9 | click | css=*[data-test=remove-sauce-labs-backpack] | 
    // Click Remove Item Button
    driver.FindElement(By.CssSelector("*[data-test=remove-sauce-labs-backpack]")).Click();
    // 10 | assertElementNotPresent | css=*[data-test=inventory-item-name] | 
    // Assert Item Is Not Present In Cart
    {
      var elements = driver.FindElements(By.CssSelector("*[data-test=inventory-item-name]"));
      Assert.True(elements.Count == 0);
    }
    // 11 | click | id=react-burger-menu-btn | 
    // Open Burger Menu
    driver.FindElement(By.Id("react-burger-menu-btn")).Click();
    // 12 | click | css=*[data-test=reset-sidebar-link] | 
    // Click "Reset App State" button
    driver.FindElement(By.CssSelector("*[data-test=reset-sidebar-link]")).Click();
    // 13 | click | css=*[data-test=logout-sidebar-link] | 
    // Click "Logout" button
    driver.FindElement(By.CssSelector("*[data-test=logout-sidebar-link]")).Click();
    // 14 | close |  | 
    // Close Website
    driver.Close();
  }
}
